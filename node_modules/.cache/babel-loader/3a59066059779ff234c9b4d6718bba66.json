{"ast":null,"code":"var _jsxFileName = \"/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/store/Todo-Context.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport TodosObj from '../../models/todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoContext = /*#__PURE__*/createContext({\n  todos: [],\n  addToDoHandler: text => {},\n  removeTodoHandler: id => {}\n});\n\nconst TodoContextProvider = props => {\n  _s();\n\n  const [todos, setTodos] = useState([]); // we have type never in here it means that we only can use empty array, to ignore this, we have to define the function\n\n  const addToDoHandler = todo => {\n    if (!todo) {\n      return;\n    }\n\n    const newTodo = new TodosObj(todo);\n    setTodos(prevState => {\n      return [...prevState, newTodo];\n    });\n  };\n\n  const removeTodoHandler = id => {\n    const filterTodo = todos.filter(items => {\n      return items.id !== id;\n    });\n    setTodos(filterTodo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: {\n      todos: todos,\n      removeTodoHandler: removeTodoHandler,\n      addToDoHandler: addToDoHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 12\n  }, this);\n};\n\n_s(TodoContextProvider, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = TodoContextProvider;\nexport default TodoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContextProvider\");","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/store/Todo-Context.tsx"],"names":["createContext","useState","TodosObj","TodoContext","todos","addToDoHandler","text","removeTodoHandler","id","TodoContextProvider","props","setTodos","todo","newTodo","prevState","filterTodo","filter","items","children"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAMA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAU;AAC9CI,EAAAA,KAAK,EAAE,EADuC;AAE9CC,EAAAA,cAAc,EAAGC,IAAD,IAAkB,CAAE,CAFU;AAG9CC,EAAAA,iBAAiB,EAAGC,EAAD,IAAgB,CAAE;AAHS,CAAV,CAAjC;;AAMP,MAAMC,mBAA6B,GAAIC,KAAD,IAAU;AAAA;;AAC5C,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBV,QAAQ,CAAkB,EAAlB,CAAlC,CAD4C,CAE9C;;AACE,QAAMI,cAAc,GAAIO,IAAD,IAA8B;AACjD,QAAI,CAACA,IAAL,EAAW;AACX;AACC;;AACD,UAAMC,OAAO,GAAG,IAAIX,QAAJ,CAAaU,IAAb,CAAhB;AACAD,IAAAA,QAAQ,CAAEG,SAAD,IAAe;AACxB,aAAO,CAAC,GAAGA,SAAJ,EAAeD,OAAf,CAAP;AACC,KAFO,CAAR;AAGH,GARD;;AASA,QAAMN,iBAAiB,GAAIC,EAAD,IAAe;AACrC,UAAMO,UAAU,GAAGX,KAAK,CAACY,MAAN,CAAaC,KAAK,IAAG;AACxC,aAAOA,KAAK,CAACT,EAAN,KAAaA,EAApB;AACC,KAFkB,CAAnB;AAGAG,IAAAA,QAAQ,CAACI,UAAD,CAAR;AACH,GALD;;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAChCX,MAAAA,KAAK,EAAEA,KADyB;AAEhCG,MAAAA,iBAAiB,EAAEA,iBAFa;AAGhCF,MAAAA,cAAc,EAAEA;AAHgB,KAA7B;AAAA,cAKFK,KAAK,CAACQ;AALJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH,CAzBD;;GAAMT,mB;;KAAAA,mB;AA2BN,eAAeA,mBAAf","sourcesContent":["import {createContext, useState} from 'react';\nimport TodosObj from '../../models/todo';\ntype TodoCtx = {\n    todos: Array<TodosObj>,\n    addToDoHandler: (text: string) => void,\n    removeTodoHandler: (id: string) => void\n}\nexport const TodoContext = createContext<TodoCtx>({\n    todos: [],\n    addToDoHandler: (text: string) => {}, \n    removeTodoHandler: (id: string) => {}\n})\n\nconst TodoContextProvider: React.FC = (props) =>{\n    const [todos, setTodos] = useState<Array<TodosObj>>([]);\n  // we have type never in here it means that we only can use empty array, to ignore this, we have to define the function\n    const addToDoHandler = (todo: string | undefined) => {\n        if (!todo) {\n        return;\n        }\n        const newTodo = new TodosObj(todo);\n        setTodos((prevState) => {\n        return [...prevState, newTodo];\n        });\n    };\n    const removeTodoHandler = (id: string) =>{\n        const filterTodo = todos.filter(items =>{\n        return items.id !== id;\n        })\n        setTodos(filterTodo);\n    }\n    return <TodoContext.Provider value={{\n        todos: todos,\n        removeTodoHandler: removeTodoHandler,\n        addToDoHandler: addToDoHandler\n    }}>\n        {props.children}\n    </TodoContext.Provider>\n}\n\nexport default TodoContextProvider;"]},"metadata":{},"sourceType":"module"}