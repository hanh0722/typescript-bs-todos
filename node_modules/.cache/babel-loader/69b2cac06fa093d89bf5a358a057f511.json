{"ast":null,"code":"var _jsxFileName = \"/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport Todo from './Todo';\nimport styles from '../Todos.module.css';\nimport { TodoContext } from '../store/Todo-Context'; // when we use props, TS wants us to define type for it but props is really specific of object, it contains our own props and also children\n// so to make it reusable and easy to control without defining the type, we use genetic <T>\n// and react has something we can use is React.FC\n// FC meanings it's Functional Component\n// if props in here is not important, it means it has or not, it's not important, we add ? before the name of definition props\n// Example: const Todos: React.FC<{items?: Array<string>}> = (props)\n//  because we're using class with object, contains 2 property, so we can change Array to the obj we djd jn class\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = () => {\n  _s();\n\n  // in here, todo array is not only string array, it should contain more like id, title, content, ... and should be object\n  // and we have to define our own props in <> after React.FC\n  const TodoCtx = useContext(TodoContext);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: styles.todos,\n    children: TodoCtx.todos.map(item => {\n      return /*#__PURE__*/_jsxDEV(Todo, {\n        text: item.text,\n        removeTodo: props.removeTodo,\n        id: item.id\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Todos, \"2LSJ1M4GotGubf7oHdfwLnCztDw=\");\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/Todos.tsx"],"names":["React","useContext","Todo","styles","TodoContext","Todos","TodoCtx","todos","map","item","text","props","removeTodo","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,QAA4B,uBAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,MAAK;AAAA;;AACf;AACA;AACA,QAAMC,OAAO,GAAGL,UAAU,CAACG,WAAD,CAA1B;AACA,sBACI;AAAI,IAAA,SAAS,EAAED,MAAM,CAACI,KAAtB;AAAA,cACKD,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkBC,IAAI,IAAG;AACtB,0BAAO,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAI,CAACC,IAAjB;AAAqC,QAAA,UAAU,EAAEC,KAAK,CAACC,UAAvD;AAAmE,QAAA,EAAE,EAAEH,IAAI,CAACI;AAA5E,SAA4BJ,IAAI,CAACI,EAAjC;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAXD;;GAAMR,K;;KAAAA,K;AAaN,eAAeA,KAAf","sourcesContent":["import React, {useContext} from 'react';\nimport TodosObj from '../../models/todo';\nimport Todo from './Todo';\nimport styles from '../Todos.module.css';\nimport { TodoContext } from '../store/Todo-Context';\n// when we use props, TS wants us to define type for it but props is really specific of object, it contains our own props and also children\n// so to make it reusable and easy to control without defining the type, we use genetic <T>\n// and react has something we can use is React.FC\n// FC meanings it's Functional Component\n// if props in here is not important, it means it has or not, it's not important, we add ? before the name of definition props\n// Example: const Todos: React.FC<{items?: Array<string>}> = (props)\n//  because we're using class with object, contains 2 property, so we can change Array to the obj we djd jn class\nconst Todos = () =>{\n    // in here, todo array is not only string array, it should contain more like id, title, content, ... and should be object\n    // and we have to define our own props in <> after React.FC\n    const TodoCtx = useContext(TodoContext);\n    return(\n        <ul className={styles.todos}>\n            {TodoCtx.todos.map(item =>{\n                return <Todo text={item.text} key={item.id} removeTodo={props.removeTodo} id={item.id}/>\n            })}\n        </ul>\n    )\n}\n\nexport default Todos;\n"]},"metadata":{},"sourceType":"module"}