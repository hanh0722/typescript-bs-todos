{"ast":null,"code":"var _jsxFileName = \"/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/Todos.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// when we use props, TS wants us to define type for it but props is really specific of object, it contains our own props and also children\n// so to make it reusable and easy to control without defining the type, we use genetic <T>\n// and react has something we can use is React.FC\n// FC meanings it's Functional Component\n// if props in here is not important, it means it has or not, it's not important, we add ? before the name of definition props\n// Example: const Todos: React.FC<{items?: Array<string>}> = (props)\n//  because we're using class with object, contains 2 property, so we can change Array to the obj we djd jn class\nconst Todos = props => {\n  // in here, todo array is not only string array, it should contain more like id, title, content, ... and should be object\n  // and we have to define our own props in <> after React.FC\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: props.items.map(items => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, item, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/Todos.tsx"],"names":["React","Todos","props","items","map","item"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAA0C,GAAIC,KAAD,IAAU;AACzD;AACA;AACA,sBACI;AAAA,cACKA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgBD,KAAK,IAAG;AACrB,0BAAO;AAAA,kBAAgBE;AAAhB,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAVD;;KAAMJ,K;AAYN,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport TodosObj from '../../models/todo';\n\n// when we use props, TS wants us to define type for it but props is really specific of object, it contains our own props and also children\n// so to make it reusable and easy to control without defining the type, we use genetic <T>\n// and react has something we can use is React.FC\n// FC meanings it's Functional Component\n// if props in here is not important, it means it has or not, it's not important, we add ? before the name of definition props\n// Example: const Todos: React.FC<{items?: Array<string>}> = (props)\n//  because we're using class with object, contains 2 property, so we can change Array to the obj we djd jn class\nconst Todos: React.FC<{items: TodosObj<string>}> = (props) =>{\n    // in here, todo array is not only string array, it should contain more like id, title, content, ... and should be object\n    // and we have to define our own props in <> after React.FC\n    return(\n        <ul>\n            {props.items.map(items =>{\n                return <li key={item}>{item}</li>\n            })}\n        </ul>\n    )\n}\n\nexport default Todos;\n"]},"metadata":{},"sourceType":"module"}