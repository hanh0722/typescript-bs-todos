{"ast":null,"code":"var _jsxFileName = \"/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/FormTodo.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useContext } from 'react';\nimport styles from '../FormTodo.module.css';\nimport { TodoContext } from '../store/Todo-Context'; // to define a function with props we use function form\n// we pass parameter inside if we have\n// and return the type of function\n// because we only run the function => type should be void\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormTodo = props => {\n  _s();\n\n  const TodoCtx = useContext(TodoContext);\n  const inputRef = useRef(null); // event is object, React has a package for us, it's .FormEvent, mouse event is MouseEvent\n\n  const submitHandler = event => {\n    var _inputRef$current;\n\n    event.preventDefault();\n    const valueInput = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value; // the ? in here meaning that if it's not connected by ref and get the value => valueInput will be null\n    // if we're sure we get value, we can use ! but normally will be ? for safety\n\n    if ((valueInput === null || valueInput === void 0 ? void 0 : valueInput.trim().length) === 0) {\n      return;\n    }\n\n    TodoCtx.addToDoHandler();\n  }; // we will receive one error about typescript because ref can use for any element\n  // ref want to know more about our ref, inputref, div ref or something like this => use generic types\n  // in here, because it's input, so it will be HTMLInputElement \n  // we still have an error because we need an initial value in here\n  // first time with ref, we have no connection, so it'll be null\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"text\",\n      children: \"Todo text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormTodo, \"3vG6KVdi1A3V4l1banheKSjSnnY=\");\n\n_c = FormTodo;\nexport default FormTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTodo\");","map":{"version":3,"sources":["/Users/hoanganh0722/Desktop/Web/The-complete-react/typescript-react/react-typescript/src/components/Todos/FormTodo.tsx"],"names":["React","useRef","useContext","styles","TodoContext","FormTodo","props","TodoCtx","inputRef","submitHandler","event","preventDefault","valueInput","current","value","trim","length","addToDoHandler","form"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,WAAT,QAA4B,uBAA5B,C,CACA;AACA;AACA;AACA;;;;AACA,MAAMC,QAAmE,GAAIC,KAAD,IAAU;AAAA;;AAClF,QAAMC,OAAO,GAAGL,UAAU,CAACE,WAAD,CAA1B;AACA,QAAMI,QAAQ,GAAGP,MAAM,CAAmB,IAAnB,CAAvB,CAFkF,CAGlF;;AACA,QAAMQ,aAAa,GAAIC,KAAD,IAA2B;AAAA;;AAC7CA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,UAAU,wBAAGJ,QAAQ,CAACK,OAAZ,sDAAG,kBAAkBC,KAArC,CAF6C,CAG7C;AACA;;AACA,QAAG,CAAAF,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,IAAZ,GAAmBC,MAAnB,MAA8B,CAAjC,EAAmC;AAC/B;AACH;;AACDT,IAAAA,OAAO,CAACU,cAAR;AACH,GATD,CAJkF,CAclF;AACA;AACA;AACA;AACA;;;AACA,sBACI;AAAM,IAAA,SAAS,EAAEd,MAAM,CAACe,IAAxB;AAA8B,IAAA,QAAQ,EAAET,aAAxC;AAAA,4BACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,MAAtB;AAA6B,MAAA,GAAG,EAAED;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA1BD;;GAAMH,Q;;KAAAA,Q;AA4BN,eAAeA,QAAf","sourcesContent":["import React, {useRef, useContext} from 'react';\nimport styles from '../FormTodo.module.css';\nimport { TodoContext } from '../store/Todo-Context';\n// to define a function with props we use function form\n// we pass parameter inside if we have\n// and return the type of function\n// because we only run the function => type should be void\nconst FormTodo: React.FC<{onAddTodo: (text: string | undefined) => void}> = (props) =>{\n    const TodoCtx = useContext(TodoContext);\n    const inputRef = useRef<HTMLInputElement>(null);\n    // event is object, React has a package for us, it's .FormEvent, mouse event is MouseEvent\n    const submitHandler = (event: React.FormEvent) =>{\n        event.preventDefault();\n        const valueInput = inputRef.current?.value\n        // the ? in here meaning that if it's not connected by ref and get the value => valueInput will be null\n        // if we're sure we get value, we can use ! but normally will be ? for safety\n        if(valueInput?.trim().length === 0){\n            return;\n        }\n        TodoCtx.addToDoHandler()\n    }\n    // we will receive one error about typescript because ref can use for any element\n    // ref want to know more about our ref, inputref, div ref or something like this => use generic types\n    // in here, because it's input, so it will be HTMLInputElement \n    // we still have an error because we need an initial value in here\n    // first time with ref, we have no connection, so it'll be null\n    return(\n        <form className={styles.form} onSubmit={submitHandler}>\n            <label htmlFor='text'>Todo text</label>\n            <input type='text' id='text' ref={inputRef}></input>\n            <button type='submit'>Add Todo</button>\n        </form>\n    )\n}\n\nexport default FormTodo;"]},"metadata":{},"sourceType":"module"}